Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\r\nimport openai\r\n\r\n# keys\r\nopenaikey = \"\"\r\n\r\n\r\n# Saves sightwords to a list\r\ndef load_sight_words():\r\n    f = open('sightwords.txt', 'r')\r\n    sight_words = f.read()\r\n    sight_words_list = sight_words.split()\r\n    f.close()\r\n    return sight_words_list\r\n\r\n\r\n# Save the graphemes to a list\r\ndef load_graphemes():\r\n    f = open('graphemes.txt', 'r')\r\n    graphemes = f.read()\r\n    graphemes_list = graphemes.split()\r\n    f.close()\r\n    return graphemes_list\r\n\r\n\r\ndef get_target_grapheme(grapheme_list):\r\n    student_level = int(input(\"What level is the student at?\"))\r\n    target_grapheme = grapheme_list[student_level]\r\n    return target_grapheme\r\n\r\n\r\n# Need to cull the list of generated words to remove words with\r\ndef get_grapheme_words(target_grapheme):\r\n    url = \"http://api.datamuse.com/words?sp=*\" + target_grapheme + \"*\"\r\n    response = requests.get(url)\r\n    words = response.json()\r\n    return [word[\"word\"] for word in words]\r\n\r\n\r\ndef main():\r\n    sight_words_list = load_sight_words()\r\n    grapheme_list = load_graphemes()\r\n    target_grapheme = get_target_grapheme(grapheme_list)\r\n    grapheme_words = get_grapheme_words(target_grapheme)\r\n    print(grapheme_words)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 012328f2241b2007760f1d7251ffb935b583f79a)
+++ b/main.py	(date 1678854730844)
@@ -1,5 +1,4 @@
 import requests
-import openai
 
 # keys
 openaikey = ""
@@ -14,13 +13,9 @@
     return sight_words_list
 
 
-# Save the graphemes to a list
+# Save the graphemes to a list. Create a dictionary of curated words for sounds like in datamuse.
 def load_graphemes():
-    f = open('graphemes.txt', 'r')
-    graphemes = f.read()
-    graphemes_list = graphemes.split()
-    f.close()
-    return graphemes_list
+
 
 
 def get_target_grapheme(grapheme_list):
Index: Testing Ground.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\r\n\r\n\r\ndef load_graphemes():\r\n    f = open('graphemes.txt', 'r')\r\n    graphemes = f.read()\r\n    graphemes_list = graphemes.split()\r\n    f.close()\r\n    return graphemes_list\r\n\r\n\r\ndef get_target_grapheme(grapheme_list):\r\n    student_level = int(input(\"What level is the student at?\"))\r\n    target_grapheme = grapheme_list[student_level]\r\n    return target_grapheme\r\n\r\n\r\ndef get_grapheme_words(target_grapheme):\r\n    url = \"http://api.datamuse.com/words?sp=*\" + target_grapheme + \"*\"\r\n    response = requests.get(url)\r\n    words = response.json()\r\n    return [word[\"word\"] for word in words]\r\n\r\n\r\ndef main():\r\n    grapheme_list = load_graphemes()\r\n    target_grapheme = get_target_grapheme(grapheme_list)\r\n    grapheme_words = get_grapheme_words(target_grapheme)\r\n    print(grapheme_words)\r\n    print(len(grapheme_words))\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Testing Ground.py b/Testing Ground.py
--- a/Testing Ground.py	(revision 012328f2241b2007760f1d7251ffb935b583f79a)
+++ b/Testing Ground.py	(date 1678855480089)
@@ -1,34 +1,29 @@
-import requests
-
+grapheme_dictionary = [
+    {
+        'name': 'a_e',
+        'datamusekey': 'a?e',
+        'examples': ['make', 'cake', 'fate']
+    },
+    {
+        'name': 'e_e',
+        'datamusekey': 'e?e',
+        'examples': ['these', 'theme', 'eve']
+    },
+    {
+        'name': 'i_e',
+        'datamusekey': 'i?e',
+        'examples': ['time', 'kite', 'wide']
+    },
+    {
+        'name': 'o_e',
+        'datamusekey': 'o?e',
+        'examples': ['hope', 'pole', 'note']
+    },
+    {
+        'name': 'u_e',
+        'datamusekey': 'u?e',
+        'examples': ['mule', 'cube', 'fuse']
+    }
+]
 
-def load_graphemes():
-    f = open('graphemes.txt', 'r')
-    graphemes = f.read()
-    graphemes_list = graphemes.split()
-    f.close()
-    return graphemes_list
-
-
-def get_target_grapheme(grapheme_list):
-    student_level = int(input("What level is the student at?"))
-    target_grapheme = grapheme_list[student_level]
-    return target_grapheme
-
-
-def get_grapheme_words(target_grapheme):
-    url = "http://api.datamuse.com/words?sp=*" + target_grapheme + "*"
-    response = requests.get(url)
-    words = response.json()
-    return [word["word"] for word in words]
-
-
-def main():
-    grapheme_list = load_graphemes()
-    target_grapheme = get_target_grapheme(grapheme_list)
-    grapheme_words = get_grapheme_words(target_grapheme)
-    print(grapheme_words)
-    print(len(grapheme_words))
-
-
-if __name__ == '__main__':
-    main()
+grapheme_dictionary = {"a_e": ["a?e", ["make", "take", "cake"]]}
Index: graphemes.txt
===================================================================
diff --git a/graphemes.txt b/graphemes.txt
deleted file mode 100644
--- a/graphemes.txt	(revision 012328f2241b2007760f1d7251ffb935b583f79a)
+++ /dev/null	(revision 012328f2241b2007760f1d7251ffb935b583f79a)
@@ -1,1 +0,0 @@
-all oll ull ck sh th ch wh ph ng nk a?e i?e o?e u?e ce ge es ed ing tch dge le ar or ar er ir ai ay ee ea ey oa ow oe ie igh
\ No newline at end of file
